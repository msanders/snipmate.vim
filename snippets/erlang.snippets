# module and export all
snippet mod
	-module(${1:`Filename('', 'my')`}).
	
	-compile([export_all]).
	
	start() ->
	    ${2}
	
	stop() ->
	    ok.
# define directive
snippet def
	-define(${1:macro}, ${2:body}).${3}
# export directive
snippet exp
	-export([${1:function}/${2:arity}]).
# include directive
snippet inc
	-include("${1:file}").${2}
# behavior directive
snippet beh
	-behaviour(${1:behaviour}).${2}
# if expression
snippet if
	if
	    ${1:guard} ->
	        ${2:body}
	end
# case expression
snippet case
	case ${1:expression} of
	    ${2:pattern} ->
	        ${3:body};
	end
# record directive
snippet rec
	-record(${1:record}, {
	    ${2:field}=${3:value}}).${4}
# fun
snippet fun
        fun(${1:arguments}) -> ${2:code} end

# gen_server
snippet gen_server
	-module(${1:module}).
	-compile(export_all).

	-behaviour(gen_server).
	-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).

	%% Public API

	start() ->
		gen_server:start({local, ?MODULE}, ?MODULE, [], []).

	stop(Module) ->
		gen_server:call(Module, stop).

	stop() ->
		stop(?MODULE).

	state(Module) ->
		gen_server:call(Module, state).

	state() ->
		state(?MODULE).

	%% Server implementation, a.k.a.: callbacks

	init([]) ->
		say("init", []),
		{ok, []}.

	handle_call(stop, _From, State) ->
		say("stopping by ~p, state was ~p.", [_From, State]),
		{stop, normal, stopped, State};

	handle_call(state, _From, State) ->
		say("~p is asking for the state.", [_From]),
		{reply, State, State};

	handle_call(_Request, _From, State) ->
		say("call ~p, ~p, ~p.", [_Request, _From, State]),
		{reply, ok, State}.

	handle_cast(_Msg, State) ->
		say("cast ~p, ~p.", [_Msg, State]),
		{noreply, State}.

	handle_info(_Info, State) ->
		say("info ~p, ~p.", [_Info, State]),
		{noreply, State}.

	terminate(_Reason, _State) ->
		say("terminate ~p, ~p", [_Reason, _State]),
		ok.

	code_change(_OldVsn, State, _Extra) ->
		say("code_change ~p, ~p, ~p", [_OldVsn, State, _Extra]),
		{ok, State}.

	%% Some helper methods.

	say(Format) ->
		say(Format, []).
	say(Format, Data) ->
		io:format("~p:~p: ~s~n", [?MODULE, self(), io_lib:format(Format, Data)]).

