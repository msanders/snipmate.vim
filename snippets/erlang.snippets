# module and export all
snippet mod
	-module(${1:`Filename('', 'my')`}).
	
	-compile([export_all]).
	
	start() ->
	    ${2}
	
	stop() ->
	    ok.
# define directive
snippet def
	-define(${1:macro}, ${2:body}).${3}
# export directive
snippet exp
	-export([${1:function}/${2:arity}]).
# include directive
snippet inc
	-include("${1:file}").${2}
# behavior directive
snippet beh
	-behaviour(${1:behaviour}).${2}
# if expression
snippet if
	if
	    ${1:guard} ->
	        ${2:body}
	end
# case expression
snippet case
	case ${1:expression} of
	    ${2:pattern} ->
	        ${3:body};
	end
# record directive
snippet rec
	-record(${1:record}, {
	    ${2:field}=${3:value}}).${4}
# fun
snippet fun
        fun(${1:arguments}) -> ${2:code} end

# gen_server
snippet gen_server
	%%%-------------------------------------------------------------------
	%%% File    : gen_server_template.full
	%%% Author  : my name <yourname@localhost.localdomain>
	%%% Description : 
	%%%
	%%% Created :  2 Mar 2007 by my name <yourname@localhost.localdomain>
	%%%-------------------------------------------------------------------
	-module(${1:module}).

	-behaviour(gen_server).

	%% API
	-export([start_link/0]).

	%% gen_server callbacks
	-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
		terminate/2, code_change/3]).

	-record(state, {}).

	%%====================================================================
	%% API
	%%====================================================================
	%%--------------------------------------------------------------------
	%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}
	%% Description: Starts the server
	%%--------------------------------------------------------------------
	start_link() ->
		gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

	%%====================================================================
	%% gen_server callbacks
	%%====================================================================

	%%--------------------------------------------------------------------
	%% Function: init(Args) -> {ok, State} |
	%%                         {ok, State, Timeout} |
	%%                         ignore               |
	%%                         {stop, Reason}
	%% Description: Initiates the server
	%%--------------------------------------------------------------------
	init([]) ->
		{ok, #state{}}.

	%%--------------------------------------------------------------------
	%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |
	%%                                      {reply, Reply, State, Timeout} |
	%%                                      {noreply, State} |
	%%                                      {noreply, State, Timeout} |
	%%                                      {stop, Reason, Reply, State} |
	%%                                      {stop, Reason, State}
	%% Description: Handling call messages
	%%--------------------------------------------------------------------
	handle_call(_Request, _From, State) ->
		Reply = ok,
		{reply, Reply, State}.

	%%--------------------------------------------------------------------
	%% Function: handle_cast(Msg, State) -> {noreply, State} |
	%%                                      {noreply, State, Timeout} |
	%%                                      {stop, Reason, State}
	%% Description: Handling cast messages
	%%--------------------------------------------------------------------
	handle_cast(_Msg, State) ->
		{noreply, State}.

	%%--------------------------------------------------------------------
	%% Function: handle_info(Info, State) -> {noreply, State} |
	%%                                       {noreply, State, Timeout} |
	%%                                       {stop, Reason, State}
	%% Description: Handling all non call/cast messages
	%%--------------------------------------------------------------------
	handle_info(_Info, State) ->
		{noreply, State}.

	%%--------------------------------------------------------------------
	%% Function: terminate(Reason, State) -> void()
	%% Description: This function is called by a gen_server when it is about to
	%% terminate. It should be the opposite of Module:init/1 and do any necessary
	%% cleaning up. When it returns, the gen_server terminates with Reason.
	%% The return value is ignored.
	%%--------------------------------------------------------------------
	terminate(_Reason, _State) ->
		ok.

	%%--------------------------------------------------------------------
	%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}
	%% Description: Convert process state when code is changed
	%%--------------------------------------------------------------------
	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.

	%%--------------------------------------------------------------------
	%%% Internal functions
	%%--------------------------------------------------------------------
