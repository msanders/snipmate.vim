# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# console.log
snippet log
        console.log('${1}');
# return
snippet ret
        return ${1:result}
# for (property in object ) { ... }
snippet in
        for (var ${1:prop} in ${2:Things}) {
                ${3:$2[$1]}
        };
# hasOwnProperty
snippet has
        hasOwnProperty(${1})
# docstring
snippet /**
        /**
         * ${1:description}
         *
         */
snippet @par
        @param {${1:type}} ${2:name} ${3:description}
snippet @ret
        @return {${1:type}} ${2:description}

# JSON.parse
snippet jsonp
        JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
        JSON.stringify(${1:object});
# try { ... } catch ...
snippet try
        try {
                ${1:/* code */}
        } catch (${2:err}) {
                ${3:alert($2.message);}
        }
# immediate function
snippet imf
        (function (${1:argument}) {
                ${2:// body ...}
        }(${3:$1}));
# self-defining function
snippet sdf
        var ${1:function_name} = function (${2:argument}) {
                ${3:// initial code ...}

                $1 = function ($2) {
                        ${4:// main code}
                };
        }
# singleton
snippet sing
        function ${1:Singleton} (${2:argument}) {
                // the cached instance
                var instance;

                // rewrite the constructor
                $1 = function $1($2) {
                        return instance;
                };
                
                // carry over the prototype properties
                $1.prototype = this;

                // the instance
                instance = new $1();

                // reset the constructor pointer
                instance.constructor = $1;

                ${3:// code ...}

                return instance;
        }